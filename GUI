import sys
import cv2
import numpy as np
import serial
import pygame
import time
import math
from PyQt5.QtWidgets import (
    QApplication, QMainWindow, QWidget, QLabel, QVBoxLayout, QHBoxLayout,
    QPushButton, QSlider, QGroupBox, QProgressBar, QSizePolicy
)
from PyQt5.QtCore import QTimer, Qt
from PyQt5.QtGui import QImage, QPixmap, QFont
from pygame.locals import *
import os 


SERIAL_PORT = '/dev/cu.usbserial-1130'
BAUD_RATE = 14400
SEND_SERIAL = True

# Servo positions
CLAW_CLOSED = 90
CLAW_OPEN = 180
ROLL_MIN = 0
ROLL_MAX = 180

# Trigger and bumper indices
LEFT_TRIGGER = 4
RIGHT_TRIGGER = 5
LEFT_BUMPER = 9
RIGHT_BUMPER = 10

# Trigger threshold
TRIGGER_THRESHOLD = 0.9

# Environment variables for controller
os.environ.update({
    "SDL_VIDEO_ALLOW_SCREENSAVER": "1",
    "SDL_TRIGGER_ALLOW_BACKGROUND_EVENTS": "1",
    "SDL_HINT_TRIGGER_ALLOW_BACKGROUND_EVENTS": "1",
    "SDL_VIDEO_X11_NET_WM_BYPASS_COMPOSITOR": "0"
})

class ThrusterController:
    def __init__(self, serial_port='/dev/tty.usbserial-1130', baud_rate=14400):
        print("\n=== Initializing ROV Controller ===")
        pygame.init()
        pygame.joystick.init()

        self.prev_command = ""
        self.prev_values = {
            'forward_back': 0,
            'strafe': 0,
            'vertical': 0,
            'yaw': 0
        }
        
        self.vertical_power = 300
        self.forward_power = 300
        self.strafe_power = 225
        self.yaw_power = 150
        
        self.default_down_thrust = -0.15
        
        # For GUI integration
        self.thrust_values = [1500, 1500, 1500, 1500, 1500, 1500]
        self.claw_is_open = False

        if pygame.joystick.get_count() > 0:
            self.joystick = pygame.joystick.Joystick(0)
            self.joystick.init()
            print(f"Controller: {self.joystick.get_name()}")
        else:
            raise Exception("No controller found!")

        try:
            self.serial = serial.Serial(serial_port, baud_rate, timeout=0.1)
            print(f"Connected to PCB on {serial_port}")
            time.sleep(2)
            self.send_command("1500,1500,1500,1500,1500,1500,1500,1500,1500\n")
        except serial.SerialException as e:
            print(f"WARNING: PCB connection failed: {e}")
            self.serial = None

    def process_joystick(self):
        """Process joystick inputs and update thruster values"""
        pygame.event.pump()
        
        dead_zone = 0.05
        
        fb = -self.joystick.get_axis(1)
        st = self.joystick.get_axis(3)
        vt = -self.joystick.get_axis(2)
        yw = -self.joystick.get_axis(0)

        fb = 0 if abs(fb) < dead_zone else fb
        st = 0 if abs(st) < dead_zone else st
        vt = 0 if abs(vt) < dead_zone else vt
        yw = 0 if abs(yw) < dead_zone else yw

        effective_vt = vt
        if abs(vt) < dead_zone and (abs(fb) > dead_zone or abs(st) > dead_zone):
            effective_vt = self.default_down_thrust

        t1 = t6 = 1500 + int(effective_vt * self.vertical_power)
        t3 = 1500 + int(fb * self.forward_power + st * self.strafe_power - yw * self.yaw_power)
        t5 = 1500 + int(fb * self.forward_power - st * self.strafe_power + yw * self.yaw_power)
        t2 = 1500 + int(-fb * self.forward_power + st * self.strafe_power + yw * self.yaw_power)
        t4 = 1500 + int(-fb * self.forward_power - st * self.strafe_power - yw * self.yaw_power)

        clamp = lambda v: max(1100, min(1900, v))
        t1 = clamp(t1); t2 = clamp(t2); t3 = clamp(t3)
        t4 = clamp(t4); t5 = clamp(t5); t6 = clamp(t6)
        
        # Store thrust values for GUI
        self.thrust_values = [t1, t2, t3, t4, t5, t6]

        turn = 1300 if self.joystick.get_button(4) else 1700 if self.joystick.get_button(5) else 1500
        grip = 1300 if self.joystick.get_button(6) else 1700 if self.joystick.get_button(7) else 1500
        
        # Update claw status for GUI
        self.claw_is_open = (grip == 1700)

        cam = 1500
        if self.joystick.get_numhats() > 0:
            dpad = self.joystick.get_hat(0)
            if dpad[1] > 0: cam = 1700
            elif dpad[1] < 0: cam = 1300

        command = f"{t1},{t2},{t3},{t4},{t5},{t6},{turn},{grip},{cam}\n"

        if command != self.prev_command:
            self.send_command(command)
            self.prev_command = command

    def get_thrust_values(self):
        """Return current thrust values for GUI display"""
        return self.thrust_values
    
    def get_claw_status(self):
        """Return claw status for GUI display"""
        return self.claw_is_open

    def controller_test(self):
        print("\n=== Controller Test Mode ===")
        clock = pygame.time.Clock()

        try:
            while True:
                self.process_joystick()
                fb = -self.joystick.get_axis(1)
                st = self.joystick.get_axis(3)
                vt = -self.joystick.get_axis(2)
                yw = -self.joystick.get_axis(0)
                
                effective_vt = vt
                if abs(vt) < 0.05 and (abs(fb) > 0.05 or abs(st) > 0.05):
                    effective_vt = self.default_down_thrust
                    
                print(f"FB:{fb:.2f} ST:{st:.2f} VT:{vt:.2f}â†’{effective_vt:.2f} YW:{yw:.2f} | T1-6: {self.thrust_values}")
                clock.tick(30)

        except KeyboardInterrupt:
            print("\n=== Stopped ===")
            self.send_command("1500,1500,1500,1500,1500,1500,1500,1500,1500\n")
        finally:
            self.close()

    def send_command(self, command):
        try:
            if hasattr(self, 'serial') and self.serial and self.serial.is_open:
                self.serial.write(command.encode('utf-8'))
        except Exception as e:
            print(f"Serial write error: {e}")

    def close(self):
        self.send_command("1500,1500,1500,1500,1500,1500,1500,1500,1500\n")
        if hasattr(self, 'serial') and self.serial and self.serial.is_open:
            self.serial.close()
        pygame.quit()


class VideoFeedWidget(QLabel):
    def __init__(self, title="Video Feed", camera_index=0, parent=None):
        super().__init__(parent)
        self.setMinimumSize(480, 360)
        self.setSizePolicy(QSizePolicy.Expanding, QSizePolicy.Expanding)
        self.setAlignment(Qt.AlignCenter)
        self.setStyleSheet("""
            border: 2px solid #3d3d3d;
            border-radius: 8px;
            padding: 5px;
            background-color: #2d2d2d;
        """)
        self.setText(f"{title}\nNo Signal")

        self.capture = cv2.VideoCapture(camera_index)
        if not self.capture.isOpened():
            print(f"Error: Could not open camera {camera_index}.")
            self.setText(f"{title}\nCamera Not Available")
            self.capture = None  
        else:
            self.timer = QTimer(self)
            self.timer.timeout.connect(self.update_feed)
            self.timer.start(30)
            

    def update_feed(self):
        if self.capture:
            ret, frame = self.capture.read()
            if ret:
                label_width = self.width()
                label_height = self.height()
                frame_height, frame_width = frame.shape[:2]
                aspect_ratio = frame_width / frame_height
                if label_width / label_height > aspect_ratio:
                    new_height = label_height
                    new_width = int(new_height * aspect_ratio)
                else:
                    new_width = label_width
                    new_height = int(new_width / aspect_ratio)
                frame_resized = cv2.resize(frame, (new_width, new_height), interpolation=cv2.INTER_AREA)
                canvas = np.zeros((label_height, label_width, 3), dtype=np.uint8)
                x_offset = (label_width - new_width) // 2
                y_offset = (label_height - new_height) // 2
                canvas[y_offset:y_offset + new_height, x_offset:x_offset + new_width] = frame_resized
                rgb_image = cv2.cvtColor(canvas, cv2.COLOR_BGR2RGB)
                h, w, c = rgb_image.shape
                bytes_per_line = c * w
                convert_to_qt_format = QImage(rgb_image.data, w, h, bytes_per_line, QImage.Format_RGB888)
                pixmap = QPixmap.fromImage(convert_to_qt_format)
                self.setPixmap(pixmap)
            else:
                self.setText("No Signal")

    def closeEvent(self, event):
        if self.capture and self.capture.isOpened():
            self.capture.release()
        event.accept()

class ThrusterPowerWidget(QWidget):
    def __init__(self, thruster_num, parent=None):
        super().__init__(parent)
        self.layout = QVBoxLayout(self)
        self.layout.setSpacing(5)

        # Thruster label (e.g., "T1")
        self.title = QLabel(f"T{thruster_num}")
        self.title.setAlignment(Qt.AlignCenter)
        self.title.setFont(QFont("Arial", 10, QFont.Bold))

        # Power bar (-100% to 100%)
        self.power_bar = QProgressBar()
        self.power_bar.setOrientation(Qt.Vertical)
        self.power_bar.setRange(-100, 100)
        self.power_bar.setValue(0)
        self.power_bar.setTextVisible(False)
        self.power_bar.setMinimumHeight(100)

        # Percentage label ("0%")
        self.power_label = QLabel("0%")
        self.power_label.setAlignment(Qt.AlignCenter)
        self.power_label.setFont(QFont("Arial", 9))

        self.layout.addWidget(self.title)
        self.layout.addWidget(self.power_bar)
        self.layout.addWidget(self.power_label)

        # Auto-reset timer (500ms delay)
        self.reset_timer = QTimer(self)
        self.reset_timer.setSingleShot(True)  # Only trigger once
        self.reset_timer.timeout.connect(self.reset_to_zero)

    def update_power(self, power):
        """Update thruster power and reset timer."""
        power = int(power)
        
        # Update the bar and label
        self.power_bar.setValue(power)
        self.power_label.setText(f"{power}%")

        # Apply styling based on thrust direction
        if power > 0:
            chunk_style = """
                QProgressBar::chunk {
                    background-color: qlineargradient(
                        x1: 0, y1: 0,
                        x2: 0, y2: 1,
                        stop: 0 #4CAF50,
                        stop: 0.5 #81C784,
                        stop: 1 #4CAF50
                    );
                }
            """
        elif power < 0:
            chunk_style = """
                QProgressBar::chunk {
                    background-color: qlineargradient(
                        x1: 0, y1: 0,
                        x2: 0, y2: 1,
                        stop: 0 #f44336,
                        stop: 0.5 #e57373,
                        stop: 1 #f44336
                    );
                }
            """
        else:
            chunk_style = """
                QProgressBar::chunk {
                    background-color: #424242;
                }
            """

        self.power_bar.setStyleSheet("""
            QProgressBar {
                border: 2px solid #3d3d3d;
                border-radius: 4px;
                background-color: #2d2d2d;
            }
        """ + chunk_style)

        # Restart the reset timer (500ms countdown)
        self.reset_timer.start(500)

    def reset_to_zero(self):
        """Reset thrust to 0% when timer expires."""
        self.update_power(0)

        
class ThrusterPowerPanel(QGroupBox):
    def __init__(self, parent=None):
        super().__init__("Thruster Power", parent)
        self.layout = QHBoxLayout(self)
        self.layout.setSpacing(15)

        self.thrusters = []
        for i in range(6):
            thruster = ThrusterPowerWidget(i + 1)
            self.thrusters.append(thruster)
            self.layout.addWidget(thruster)

        self.setStyleSheet("""
            QGroupBox {
                background-color: #2d2d2d;
                border: 2px solid #3d3d3d;
                border-radius: 8px;
                margin-top: 1em;
                padding: 10px;
            }
            QGroupBox::title {
                subcontrol-origin: margin;
                left: 10px;
                padding: 0 5px;
                color: white;
            }
        """)

    


class ClawStatusWidget(QWidget):
    def __init__(self, parent=None):
        super().__init__(parent)
        self.layout = QHBoxLayout(self)

        self.status_label = QLabel("CLAW STATUS:")
        self.status_label.setFont(QFont("Arial", 12, QFont.Bold))

        self.indicator = QLabel("CLOSED")
        self.indicator.setFont(QFont("Arial", 12, QFont.Bold))
        self.indicator.setStyleSheet("color: #ff4444;")

        self.layout.addWidget(self.status_label)
        self.layout.addWidget(self.indicator)
        self.layout.setContentsMargins(20, 10, 20, 10)

    def update_status(self, is_open):
        self.indicator.setText("OPEN" if is_open else "CLOSED")
        self.indicator.setStyleSheet(
            "color: #4CAF50;" if is_open else "color: #ff4444;"
        )

class ROVControlPanel(QMainWindow):
    def __init__(self):
        super().__init__()
        self.controller = ThrusterController()  

        self.central_widget = QWidget()
        self.setCentralWidget(self.central_widget)
        self.main_layout = QHBoxLayout(self.central_widget)
        self.left_panel = QVBoxLayout()
        self.thruster_power_panel = ThrusterPowerPanel()
        self.left_panel.addWidget(self.thruster_power_panel)

        self.center_panel = QVBoxLayout()
        self.video_feed = VideoFeedWidget("Camera Feed", camera_index=0)
        self.center_panel.addWidget(self.video_feed)

        self.right_panel = QVBoxLayout()
        self.claw_status = ClawStatusWidget()
        self.right_panel.addWidget(self.claw_status)


        self.measure_button = QPushButton("Task 1: Measure")
        self.measure_button.clicked.connect(self.run_measure_task)
        self.right_panel.addWidget(self.measure_button)

        self.right_panel.addStretch()
        self.main_layout.addLayout(self.left_panel)
        self.main_layout.addLayout(self.center_panel, stretch=2)
        self.main_layout.addLayout(self.right_panel)

        self.timer = QTimer(self)
        self.timer.timeout.connect(self.update_ui)
        self.timer.start(100)

        self.setWindowTitle("ROV Control Panel")
        self.setStyleSheet("background-color: #121212; color: white;")

    def update_ui(self):
        """Update UI with controller data"""
        self.controller.process_joystick()
        thrust_values = self.controller.get_thrust_values()  
        
        display_values = [(val - 1500) / 4 for val in thrust_values]
        
        for i, thruster in enumerate(self.thruster_power_panel.thrusters):
            thruster.update_power(display_values[i])
            
        # Update claw status
        claw_status = self.controller.get_claw_status()
        self.claw_status.update_status(claw_status)

    def keyPressEvent(self, event):
        if event.key() == Qt.Key_C:
            self.capture_camera_feed()

    def capture_camera_feed(self):
        ret, frame = self.video_feed.capture.read()
        if ret:
            save_path = "/Users/krishnanujam/Desktop/captured_image.jpeg"
            cv2.imwrite(save_path, frame)
            print(f"Image saved to {save_path}")
        else:
            print("Failed to capture image from Camera Feed.")

    def run_measure_task(self):
        img_path = '/Users/krishnanujam/Desktop/captured_image.jpeg'
        output_path = '/Users/krishnanujam/Desktop/undistorted.jpeg'

        distorted_img = cv2.imread(img_path)
        if distorted_img is None:
            print(f"Error: Image not found at {img_path}")
            return

        K = np.array([[3500, 0, distorted_img.shape[1] / 2],
                      [0, 3500, distorted_img.shape[0] / 2],
                      [0, 0, 1]], dtype=np.float32)
        D = np.array([-0.7, 0.7, 0, 0], dtype=np.float32)

        h, w = distorted_img.shape[:2]
        new_K = cv2.fisheye.estimateNewCameraMatrixForUndistortRectify(K, D, (w, h), np.eye(3), balance=0.0)
        map1, map2 = cv2.fisheye.initUndistortRectifyMap(K, D, np.eye(3), new_K, (w, h), cv2.CV_16SC2)
        undistorted_img = cv2.remap(distorted_img, map1, map2, interpolation=cv2.INTER_LINEAR, borderMode=cv2.BORDER_CONSTANT)

        cv2.imwrite(output_path, undistorted_img)
        print(f"Undistorted image saved at {output_path}")

        image = cv2.imread(output_path)
        pointCoordinates1 = []
        pointCoordinates2 = []
        scale_length = None
        scale_pixels = None

        def click_points(event, x, y, flags, param):
            nonlocal pointCoordinates1, pointCoordinates2, scale_length

            if event == cv2.EVENT_LBUTTONDOWN:
                coordinate = (x, y)
                if not scale_length:
                    if len(pointCoordinates1) < 2:
                        pointCoordinates1.append(coordinate)
                    else:
                        pointCoordinates1 = [coordinate]
                else:
                    if len(pointCoordinates2) < 2:
                        pointCoordinates2.append(coordinate)
                    else:
                        pointCoordinates2 = [coordinate]

                cv2.circle(image, (x, y), 4, (255, 255, 255), 4)
                cv2.imshow("Image", image)

        def calculate_distance(x1, y1, x2, y2):
            return math.sqrt((x2 - x1) ** 2 + (y2 - y1) ** 2)

        def set_scale_length():
            nonlocal scale_length, scale_pixels
            if len(pointCoordinates1) == 2:
                x1, y1 = pointCoordinates1[0]
                x2, y2 = pointCoordinates1[1]
                scale_pixels = calculate_distance(x1, y1, x2, y2)
                scale_length = float(input("Enter the actual length (in cm) of the selected scale: "))

        def calculate_length():
            nonlocal scale_length, scale_pixels
            if len(pointCoordinates2) == 2:
                x1, y1 = pointCoordinates2[0]
                x2, y2 = pointCoordinates2[1]
                pixels = calculate_distance(x1, y1, x2, y2)
                length = (pixels * scale_length) / scale_pixels
                print(f"Measured Length: {length:.2f} cm")

        cv2.imshow("Image", image)
        cv2.setMouseCallback("Image", click_points)

        while True:
            key = cv2.waitKey(1) & 0xFF
            if key == ord("s"):
                set_scale_length()
            elif key == ord("m"):
                calculate_length()
            elif key == ord("q"):
                break

        cv2.destroyAllWindows()

    def closeEvent(self, event):
        self.controller.close()  
        event.accept()

if __name__ == "__main__":
    # Choose execution path
    RUN_GUI = True
    
    if RUN_GUI:
        app = QApplication(sys.argv)
        window = ROVControlPanel()
        window.show()
        sys.exit(app.exec_())
    else:
        try:
            controller = ThrusterController()
            controller.controller_test()
        except Exception as e:
            print(f"\nError: {e}")
        finally:
            if 'controller' in locals():
                controller.close()
                
